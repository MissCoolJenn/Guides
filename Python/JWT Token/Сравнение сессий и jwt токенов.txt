При регистрации пользователь вносится в БД где запоминается его user_name & password

При авторизации есть 2 метода обезопасить сессию:
1. Использовать сессионный метод
2. Использовать jwt токены

	Сессионный метод:
Плюсы:
1. Полный контроль за пользователями

Минусы:
1. При короткой длинне сессии может вызывать неудобство пользования
2. При маштабировании может вызвать эффект бутылочного горлышка 

	Jwt токены:
Плюсы:
1. Удобство решенной проблемы при маштабировании

Минусы:
1. Нет полного контроля за пользователями 


-----------------------------------------------------------------------------------------------------
	Сессионный подход:
- При авторизации в БД сохраняется сессия (чаще всего в формате ключ-значение), после чего пользователю возвращается айди сессии ввиде куки которая будет хравнится у него в браузере (бэк может создавать куки пользователям сам, ну или фронт может свою логику сделать где будет использоваться локал сторедж хоть и идея не оч по безопасности) 

- Дальше когда пользователь хочет совершить действие которое нужно подтвердить его личностью вместе с запросом так же отправляется на сервер кука с айди сессии
Сервер проверяет валидна ли сессия в БД, если да - запрос удовлетворяется, если нет - вовращяется ошибка 401 (permission denided) 

- При разлогинивании делается запрос на сервер удалить сессию из БД + удалить куку с браузера пользователя


+ Из плюсов можно со стороны сервера в любой момент закрыть сессию и даже если кука останется у пользователя - сделать он ничего не сможет кроме как заново залогинится через логин и пароль
- Из минусов это всё должно хранится в БД и частые запросы к ней просто могут перегрузить сервер и время ответа будет очень долгим ввиде ограниченой пропускной спрособность (прям как бутылочное горлышко)


-----------------------------------------------------------------------------------------------------
	Jwt токены:
(В целом токены не только jwt, jwt - это только подход, могут быть и другие)

- При авторизации пользователя БД не использутся а только выпускается токен
Токен создается из 3х составляющих:
	1. Алгорим шифрования (jwt использует base64)
	2. Данные о пользователе (имя пользователя, уровень доступа, время когда токен станет невалидным и т.д.)
	3. Уникальная подпись для генерации которой на сервере указано секретное ключ слово 

- После на стороне пользователя это опять сохраняется в куки и при запросе к серверу с подтверждением лиичности так же отправляется этот куки
Сервер же проверяется валидность токена и если всё ок - запрос удовлетворен, если нет - 401

+ Плюс - решение проблемы маштабирования т.к. больше не нужно делать запросы в БД а проверить токен может любой сервер у которого есть секретное слово
- Из минусов невозможно контролировать сессии пользователя. Сессия будет продолжатся столько, сколько указано время жизни токена
Например если понизить пользователя в уровне доступа, он может через браузер создать куку с скопированным ранее токеном и пока есть время вредить доступом который у него забрали

.....................................................................................................
Так же есть вариант использовать 2 токена
Access & Refresh

Access - живет достаточно не долго (пару часов, максимум пару дней) и используется как раз для подтверждения личности при запросах к серверу

Refresh - используется для перевыпуска Access токена т.к. живет намного дольше (от пары дней, до недель и месяцов)