	    *виртуальное окружение

python -m venv .venv  - создать виртуальное окружение ".venv"
source .venv/bin/activate  - включить виртуальное окружение (на линукс)
deactivate  - выключить в.о.
.gitignore  - файл который можно создать в корне папки и добавлять туда всё то, что должно игнорироваться гитом
python -m pip freeze > requirements.txt  - в файл "requirements.txt" сохранить все библиотеки которые нужны для работы с кодом
pip install -r requirements.txt  - из файла requirements.txt установить указаные там библиотеки
pip uninstall *name lib*   - удалить библиотеку
pip uninstall -r requirements.txt -y   - удалить все библиотеки что записаны в файл требований




	    *гит и гитхаб

git init  - инициализировать репозиторий
git status  - статус файлов в которых были или не было изменений
...
git remote add origin (ссылка на репозиторий) - добавление сслыки на репозиторий в который будут пушится все изменения
git commit -m ""  - коммит изменений 
git push -u origin main  - запушить коммит в ветку main на гитхаб
...
git pull (ссылка на репозиторий) (ветка)  - скачать актуальную версию кода 
...
git branch  - посмотреть ветку
git branch -m master main  - поменять ветку с master на main
git log  - посмотреть историю коммитов
git reset - откат изменений до последнего коммита 
...
--force  - если добавить, будет силой пушить изменения на гитхаб даже если до этого были предупреждения о несовместимости и т.д.
...
touch .gitignore  - создать файл гит игнор записывая в который имя файлов они будут игнорироваться при создании комитов



	    *django создание нового проекта

mkdir (название коневой папки проекта)
cd (только что созданная папка)
python -m venv .venv
source .venv/Scripts/activate
python -m pip install django==4.0.0
django-admin startproject (название проекта) .  - точка в конце обязательна
python manage.py startapp (название приложения)
	^ или если не работает, то :
python -m django startapp (название приложения)

** - добавить название приложение в settings - installed apps
** - добавить название папки темплейтов в settings - DIRS
** - 
** - 
** - 
** - 
** - 
** - 
** - 
** - 
** - 
** - 
** - 



        * Подключение React к django

    (БЭКЭНД)
- Установить django, djangorestframework, django-cors-headers

- Создание django проекта и приложения
- Создание самой обычной модели Бд в .models
- (по желанию регистрация в админ панели для отладки)

- Создание сериализатора (конвертирует переменные из python'a в формат JSON который уже можно использовать в JS)
========================
from rest_framework import serializers
from .models import Test_DB

class PostSerializer(serializers.ModelSerializer):
    class Meta:
        model = Test_DB
        fields = ['title', 'text']
========================

- Написать .view в виде API
========================
from django.shortcuts import render
from rest_framework.views import APIView
from .models import Test_DB
from .serializer import PostSerializer
from rest_framework.response import Response

# Create your views here.
class StoreView(APIView):
    def get(self, request):
        output = [
            {
                'title': output.title,
                'text': output.text
            } for output in Test_DB.objects.all()
        ]
        return Response(output)
    
    def post(self, request):
        serializer = PostSerializer(data=request.data)
        if serializer.is_valid(raise_exception=True):
            serializer.save()
            return Response(serializer.data)
========================

- Настроить маршрут в главном файле url
========================
from django.contrib import admin
from django.urls import path
from django.urls import re_path as url
from Store.views import *

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', StoreView.as_view(), name='title')
]
========================

- Настройка Corsheaders и Restframework внутри settings.py
========================
INSTALLED_APPS = [
    ...
    'Store',
    'corsheaders',
    'rest_framework', 
]

MIDDLEWARE = [
    ...
    'corsheaders.middleware.CorsMiddleware',
]

# указка что нужно принимать все запросы, даже те что не прошли подтверждение подлинности и аутентификации
#   (в адекватном приложении нужно будет использовать jwt токены для безопасности)
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny'
    ]
}

# указка здесь и в middleware для джанга что приложения запущены на одном источнике и передавать данные безопасно
CORS_ORIGINN_ALLOW_ALL = True
========================
    ^ это всё дает разрешение джанге на передачу данных не только внутри самого джанга,
        а и через запросы rest api например в реакт
            (политика SOP (same origin politic) т.к. джанга и реакт работают на разных портах)

- Дальше можно делать миграцию, регать админа и проверяь Rest на главной странице

    (Фронтенд)









	    *Raspberry pi pico (RP2040)

(Bootmode) - настроить интерпритатор - установить или обновить MicroPython - arduino... не помню
    ^ установка ядра

(IDE Thonny) - MicroPython (Pi Pico) - port Board COM16
    ^ подключение к плате для запуска скриптов на ней

"main.py" - имя файла для автозапуска кода при подаче питания



	    *heroku

python -m pip install gunicorn==20.1.0  - установить ядро для работы heroku
...
ALLOWED_HOSTS = [".herokuapp.com", "localhost", "127.0.0.1"]  - (в project.settings.py добавить адреса по которым можно обратиться к сайту)
web: gunicorn django_project.wsgi --log-file -  - создать в корне файл "Procfile" и добавить туда эту строку
python-(версия пайтона)  - в файл "runtime.txt" добавить версию пайтона на которой это всё разрабатывалось
...
heroku login  - залогиниться в heroku
heroku create  - подготовить проект на heroku для работы
heroku config:set DISABLE_COLLECTSTATIC=1  - заставить heroku игнорировать статичесские файлы
git push heroku main  - запушить последний коммит на в облако heroku
heroku ps:scale web=1  - выбор тарифа на котором будет работать сайт (1 - бесплатный)
heroku rename (новое имя страницы)  - переинменовать найзвание и https сайта
heroku open  - открыть страницу сайта в гугл