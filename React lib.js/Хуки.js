import React from "react";

// https://ru.legacy.reactjs.org/docs/hooks-reference.html#usecontext - реакт документация

<>-- useState --------------------------------------------------------</>
//      ^ используется для хранения данных о состоянии внутри своих переменных
import { useState } from 'react'

function State() {
    const [count, setCount] = useState(0);
    //                                 ^ начальное значение
    //               ^ функция ипользующаяся для изменения значния переменной
    //       ^ сама переменная 

    const increment = () => {
        setCount((prevCount) => prevCount + 1);
        //                   ^ стрелочная функция принимающая на начале значние левое и возвращает правое
        //            ^ получает последнее сохраненное значние переменной
    }

    return (
        <div>
            <p>На кнопку нажали {count} раз</p>
            <button onClick={increment}>Нажми</button>
        </div>
    )
}



<>-- useEffect -------------------------------------------------------</>
//      ^ триггер срабатывающий при обновлении или отрисовке компонента
import { useState, useEffect } from 'react'

function Effect() {
    const [windowWidth, setWindowWidth] = useState(window.innerWidth)
    // Получение размера окна при открытии страницы

    useEffect(() => {
        const handleResize = () => setWindowWidth(window.innerWidth);
        // стрелочна функция переписи актуального значения размера окна на новое

        window.addEventListener('resize', handleResize);
        //                                   ^ при срабатывании триггера будет вызвана эта функция
        //                         ^ условия триггера 
        //      ^ Установка триггера
    }// ничего  - будет срабатывать при каждом рендере объекта
     // []      - сработает только первый рендет и дальше похуй
     // [obg]   - сработает при любом изменении именно переменной
    );

    return (
        <div>
            <h2>Display size</h2>
            <p>Width: {windowWidth}</p>
        </div>
    )
}



<>-- useContext ------------------------------------------------------</>
//      ^ через него можно связать множество разных компонентов и меняя значение контекста - 
//          - триггерить перерендер подвзанных компонентов

import { createContext, useContext } from 'react'
//    Когда использовать useContext
// Тема приложения (темная/светлая):
// Хранить информацию о текущей теме и изменять её.
// 
// Языковые настройки (локализация):
// Передавать текущий язык или текстовые строки (например, "EN" или "RU").
// 
// Авторизация:
// Хранить информацию о текущем пользователе, например, ID, имя или токен.
// 
// Общие состояния:
// Например, состояние корзины в интернет-магазине, текущие настройки фильтров и т. д.
// 
// Функции обратного вызова (callback):
// Например, функции для глобального уведомления (toast), модальных окон или логирования ошибок.

const themeContext = createContext(); 
//                                 ^ значение по умолчанию (если указать - потом не получится поменять)
//                         ^ создание контекста

function Div_p() {
    const theme = useContext(themeContext);
    //               ^ получение темы из контекста

    return (
        <div>
            <p>Text for text with {theme} theme</p>
        </div>
    )
}

function App() {
    const {theme, setTheme} = useState('dark') // хранение состояния темы

    return (
        <themeContext.Provider value={theme}>
        {/* Оборачиваем приложение в Provider
            Provider используется для получения значение из контекста и раздачи его дочерним элементам
            (типо как точка доступа которая сама будет оповещать елементы что значение контекста поменялось) */}
            <main>
                <button onClick={() => setTheme(theme === "light" ? "dark" : "light")}>
                    Переключить тему
                </button>
                <Div_p />
            </main>
        </themeContext.Provider>
    )
}
// ^ Context.Provider исполняет фукнцию передачи значений, в то время как State - хранение и изменение
// сам Context не имеет функции изменения значений 